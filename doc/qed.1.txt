


NAME
     qed - multi-file text editor

SYNOPSIS
     qed [ - ] [ -i ] [ -q ] [ -x startupfile ] [ file1 file2 ...
     ]

DESCRIPTION
     Qed is a multiple-file text editor, much like Ed, but with a
     number of enhancements and a few incompatibilities.

     Qed operates on a copy of any file it is editing; changes
     made in the copy have no effect on the file until a w
     (write) or a W (WRITE) command is given.  The copy of the
     text being edited resides in a scratch area called a buffer.
     There are 56 buffers, labeled by alphabetics `a' to `z' and
     `A' to `Z', and the characters `{', `|', `}' and `~' (the
     four ASCII characters following `z').  These 56 characters
     are called, for notational efficiency, bnames.  The buffers
     can contain any ASCII character except NUL.

     If file arguments are given, qed simulates an e command (see
     below) on each of the named files; that is to say, the files
     are read into qed's buffers so that they can be edited.  The
     first is read into buffer `a', the second into buffer `b',
     through `z', then from `A' to `Z', up to a maximum of 52
     files.  The optional - puts qed in non-verbose mode
     (described with the o command).  Quit signals are ignored
     unless the -q flag is used; interrupts are ignored unless
     the -i flag is used.  The -q and -i are equivalent to
     performing an initial `ois' or `oqs' command (see the o
     command below).

     The buffer labeled `~' is a ``startup'' buffer.  When qed
     starts up, a specified file (settable using qedfile(VI)) is
     read into buffer `~' and executed (i.e. read as command
     input) before reading in files and accepting commands from
     the terminal.  This is useful to set up options, registers,
     etc. (see below).  Note that this also supercedes the
     prompt(I) command, which is not supported by qed.  The
     default startup file may be overridden with the -x option.

     Qed has 56 registers, labeled by bnames.  (A register and
     buffer with the same bname are otherwise unrelated.)  The
     registers are manipulated by the z command, which provides
     commands to handle the registers as simple strings or
     decimal numbers.  The registers can be used to store any
     text.  Registers are typically used to hold numbers, macros,
     programs and frequently-typed text.

     Input to qed can be redirected, at any time, to come from
     storage such as a buffer or register by use of a special
     character such as ``\b'' or ``\z''.  All the special
     characters in qed are discussed in detail below; they all
     begin with a backslash `\'.  It is unwise to type a
     backslash to qed before reading the section below which
     describes their interpretation.

     Qed has a truth flag (`t') that is set by the z, o, !, <, >,
     and s commands.  This truth flag can be used in the y and h
     commands (see below).  It is set (reset) by the s command,
     if the substitution was (was not) performed, by register
     comparisons in z commands, and to the return status of the
     executed program in !, <, and > commands.

     As well, Qed has a `count', which is set to the number of
     characters transferred during i/o operations and to the
     number of substitutions made in the s command.  It is also
     set by some register operations and the `ok' command.  The
     count can be saved in a register by a z command.

     Each buffer has associated with it a (possibly null)


                              - 1 -




QED(I)                       Jan/80                        QED(I)


     filename and a ``changed'' flag, which is set if the
     contents of the buffer are known to differ from the contents
     of the named file in that buffer.  It may also be set as
     desired by the `ocs' or `ocr' commands.

     Commands to qed have a simple and regular structure: zero or
     more addresses followed by a single character command,
     possibly followed by parameters to the command.  These
     addresses specify one or more lines in the buffer.  Every
     command which requires addresses has default addresses, so
     that the addresses can often be omitted.

     In general, any number of commands can appear on a line.
     Some commands require that the character following the
     command be a separator, such as blank, tab or newline.
     Usually, a display command, p, P, l, or L may precede the
     separator.  Certain commands allow the input of text for
     placement in the buffer.  This text can be supplied in two
     forms: either on the same line, after the command, or on
     lines following the command, terminated by a line containing
     only a period `.'.  If the data is on the command line, it
     is separated from the command by a space or a tab.  If the
     tab is used, it is considered part of the text.

     Qed supports a limited form of regular expression notation.
     A regular expression specifies a set of strings of
     characters.  A member of this set of strings is said to be
     matched by the regular expression.  Regular expressions in
     qed are delimited by enclosing them in a pair of identical
     characters, frequently slashes `/'.  The regular expressions
     allowed by qed are constructed as follows:

       1.   An ordinary character (not `\', `.', `[', `*', `+',
           `^', `$', newline, or the delimiting character) is a
           regular expression and matches that character.  If qed
           is in dualcase search mode (see the o command) a
           letter is matched without regard to its case.

       2.   A backslash `\' followed by any character in the list
           given in rule 1 is a regular expression and matches
           that character.  This form is used to match the
           delimiting character and the backslash itself.  A
           backslash followed by one of `!', `_', `{', `}', `('
           or `)' has a special meaning discussed below;
           otherwise, backslashes have literal meaning in regular
           expressions except for interpretation as special
           characters such as `\b'.

       3.   A period `.' matches any character except a newline.

       4.   The sequence `\!' matches any control character
           except tab or newline.

       5.   A string of characters enclosed in square brackets
           `[ ]' matches any character in the string but no
           other.  If the string contains a minus `-' with a
           character on either side of it, they together match
           any character lexically greater than or equal to the
           first and not greater than the second.  If, however,
           the first character of the string is a caret `^' the
           regular expression matches any character except
           newline and the characters that would otherwise be
           matched.  If it is desired to include a closing square
           bracket in the string, it must be the first character,
           except for the optional caret.  Similarly, if it is
           desired to match a minus sign, it must either be the
           first or last character in the string (except for the
           optional caret).

       6.   A regular expression followed by an asterisk `*'


                              - 2 -




QED(I)                       Jan/80                        QED(I)


           matches any number of adjacent occurrences (including
           zero) of the regular expression it follows.  The
           regular expression must be formed according to one of
           the first five rules.  If the asterisk is the first
           character of the expression, after the optional caret
           `^' (see rule 10), or is the first character after a
           regular expression formed by rule 6 or rule 7, it
           matches the character `*'.

       7.   A regular expression followed by a plus sign `+'
           matches one or more occurrences of the regular
           expression.  The regular expression must be formed
           according to one of the first five rules.  If the plus
           sign is the first character of the expression, after
           the optional caret, or is the first character after a
           regular expression formed by rule 6 or rule 7, it
           matches the character `+'.

       8.   The sequence `\_' matches a non-empty maximal-length
           sequence of blanks and tabs.

       9.   The concatenation of regular expressions is a regular
           expression which matches the concatenation of the
           strings matched by the components of the regular
           expression.

       10.  A caret `^' at the beginning of a regular expression
           matches the empty string at the beginning of a line.
           At any other place in a regular expression, it matches
           the character `^'.

       11.  A currency symbol `$' at the end of a regular
           expression matches the empty string at the end of a
           line.  At any other place in a regular expression, it
           matches the character `$'.

       12.  The sequence `\{' matches the begining of an
           identifier, that is, an empty string followed by a
           letter or underscore `_' and not preceded by a letter,
           digit, or underscore.

       13.  The sequence `\}' matches the end of an identifier,
           that is, an empty string preceded by a letter, digit,
           or underscore, and not followed by a letter, digit, or
           underscore.

       14.  A regular expression enclosed between the sequences
           `\(' and `\)'is identical to the unadorned expression;
           the construction has side effects discussed under the
           s command.

       15.  The null regular expression standing alone is
           equivalent to the last regular expression encountered.

     Regular expressions are used in addresses to specify lines
     and in one command (see s below) to specify a portion of a
     line which is to be replaced.

     To understand addressing in qed it is necessary to know that
     at any time there is a current buffer and a current line.
     When qed is invoked, the current buffer is buffer `a', but
     may be changed at any time by a b (change buffer) command.
     All addresses refer to lines in the current buffer, except
     for a special case described under the m (move) and t (copy)
     commands.

     Generally speaking, the current line is the last line
     affected by a command; however, the exact effect on the
     current line is discussed under the description of the
     command.  Addresses are constructed as follows.


                              - 3 -




QED(I)                       Jan/80                        QED(I)


       1.   The character `.' addresses the current line.

       2.   The character `$' addresses the last line of the
           buffer.

       3.   A decimal number n addresses the n-th line of the
           buffer.

       4.   `'x' addresses the line marked with the mark name
           character x, which must be a bname.  Lines are marked
           with the k command described below.  It is an error
           for the marked line to be outside of the current
           buffer.

       5.   A regular expression enclosed in slashes `/'
           addresses the first matching line found by searching
           forwards from the line after the current line.  If
           necessary the search wraps around to the beginning of
           the buffer.

       6.   A regular expression enclosed in queries `?'
           addresses the first matching line found by searching
           backwards from the line before the current line.  If
           necessary the search wraps around to the end of the
           buffer.

       7.   An address followed by a plus sign `+' or a minus
           sign `-' followed by a decimal number specifies that
           address plus (resp. minus) the indicated number of
           lines.  The plus sign may be omitted.

       8.   An address followed by `+' or `-' followed by a
           regular expression enclosed in slashes specifies the
           first matching line following (resp. preceding) that
           address.  The search wraps around if necessary.  The
           `+' may be omitted, so `0/x/' addresses the first line
           in the buffer with an `x'.  Enclosing the regular
           expression in `?' reverses the search direction.

       9.   If an address begins with `+' or `-' the addition or
           subtraction is taken with respect to the current line;
           e.g. `-5' is understood to mean `.-5'.

       10.  An address followed by `+' or `-' not followed by an
           operand, addresses the next (resp. previous) line.  As
           a consequence of this rule and rule 9, the address `-'
           refers to the line before the current line, and `--3'
           refers to the current line less 4.

       11.  To maintain compatibility with earlier versions of
           the editor, the character `^' in addresses is entirely
           equivalent to `-'.

     Commands may require zero, one, or two addresses.  Commands
     which require no addresses regard the presence of an address
     as an error.  Commands which accept one or two addresses
     assume default addresses when none is given.  In commands
     expecting two addresses, these addresses denote a range of
     lines; if only one address is given, the range is taken to
     be the single addressed line.  If more addresses are given
     than the command requires, the last one or two (depending on
     what is accepted) are used.  The last addressed line must
     not precede the second-last addressed line.

     Typically, addresses are separated from each other by a
     comma `,'.  They may instead be separated by a semicolon `;'
     in which case the current line `.' is set to the first
     address before the second address is interpreted.  Addresses
     may also be separated by an asterisk `*' in which case the
     first address defaults to line one (line zero if the buffer


                              - 4 -




QED(I)                       Jan/80                        QED(I)


     is empty), and the second is interpreted as if it were
     prefixed with `$'.  Thus, the address list `*' denotes the
     whole buffer, and `7*' denotes all lines from seven on.

     Filename operands of commands may be made up of printing
     characters only.  However, when the filename appears as the
     argument to the invocation of qed, non-printing characters
     may be included.  When a filename is specified for a
     command, it is terminated at the first blank, tab or
     newline.

     In the following list of qed commands, the default addresses
     are shown in parentheses.  The parentheses are not part of
     the address, but are used to show that the given addresses
     are the default.

     ( . )a <text>
           The append command accepts input text and appends it
          after the addressed line.  `.' is left on the last line
          input, if there were any, otherwise at the addressed
          line.  Address `0' is legal for this command; text is
          placed at the beginning of the buffer.  A `p', `l', `P'
          or `L' (hereinafter referred to generically as display
          characters) immediately after the `a' causes the last
          line appended to be displayed, in the appropriate
          format, when all the text has been appended.

     b<bname>
           The change buffer command sets the current buffer to
          be that named, for subsequent qed commands.  No blank
          is permitted between the `b' and the buffer name.  `.',
          `$' and the remembered filename are set to those of the
          new buffer; upon return to a previously used buffer,
          `.' will be set to its value when the buffer was last
          used.

     ( . )b[+-][pagesize][display character]
           The browse command provides page-oriented printing.
          The optional `+' or `-' specifies whether the next or
          previous page is to be printed; if absent, `+' is
          assumed.  If a pagesize is given, it is used for the
          current browse command and remembered as the default.
          The pagesize is initially 20 lines.  If a terminal
          display character is provided, the lines are printed in
          the specified format, and the format is remembered as
          the default.  Initially, `p' is the default.  After a
          browse command, `. is left at the last line displayed.
          NOTE: The browse and change buffer commands are the
          same character!  This is for compatibility with ed.
          The two commands can be syntactically distinguished in
          all cases except for `b<display char>'; this ambiguity
          may be resolved by typing the (implicit) `+' after the
          `b'.

     ( . , . )c <text>
           The change command deletes the addressed lines, then
          accepts input text which replaces these lines.  `.' is
          left at the last line input; if there were none, it is
          left at the line preceding the deleted lines.

     cd filename
          The change directory command changes qed's current
          directory.  The changed flag is set in all buffers
          whose file name does not begin with a slash `/'.

     ( . , . )d
          The delete command deletes the addressed lines from the
          buffer.  The line after the deleted section becomes the
          current line; if the deleted lines were originally at
          the end, the new last line becomes the current line.


                              - 5 -




QED(I)                       Jan/80                        QED(I)


          The character after the `d' can only be one of a blank,
          newline or tab, a display character, or (idiomatically)
          `-'.  Line 0 is a valid address for deletion; deleting
          line 0 has no affect on any lines in the buffer.

     e filename
          The edit command causes the entire contents of the
          current buffer to be deleted, and then the named file
          to be read in.  `.' is set to the last line of the
          buffer.  The number of characters read is typed if qed
          is in verbose mode.  The filename is remembered for
          possible use as a default file name in a subsequent f,
          r, w, or W command.

     f filename
          The filename command prints information about the
          current buffer, in the format used by the n command.
          If filename is given, the currently remembered file
          name is changed to filename.  If qed is not in verbose
          mode, the information is only printed if the filename
          is not specified.  If it is not desired to set the
          filename, the character immediately after the f must be
          a newline.  Otherwise, the first token (which may be
          the null string) on the line, after a mandatory non-
          empty sequence of blanks and tabs, is taken to be the
          filename.  These rules apply to all filename-using
          commands, cd, e, f, r, R, S, w and W, although some
          regard specification of an explicitly null filename as
          an error.

     (1,$)g/regular expression/command list
          In the global command, the first step is to mark every
          line in the range which matches the regular expression.
          Then for every such line, the command list is executed
          with `.' initially set to that line.  Any embedded
          newlines in the command list must be escaped with a
          backslash.  The a, i, and c commands and associated
          input are permitted; the `.' terminating input mode may
          be omitted if it would be on the last line of the
          command list.  If the command list contains an x
          command, the x command's input comes from the terminal,
          not the command list.  The (global) commands, g, and v,
          are not permitted in the command list.  If the command
          list is empty, `.p' is assumed.  The regular expression
          may be delimited by any character other than newline.

     G/regular expression/command list
          In the GLOBUF command, the first step is to mark every
          active buffer whose output from an `f' command would
          match the regular expression.  (An active buffer is one
          which has either some text or a remembered file name.)
          Then for every such buffer, the command list is
          executed with the current buffer set to that buffer.
          In other respects it is like the global command, except
          that only the GLOBUF commands, G and V, are not
          permitted in the command list.  If the command list is
          empty, `f' is assumed.

     h<option> command list
          The until command provides a simple looping mechanism.
          The command list is a newline-terminated command
          sequence which forms the body of the loop; embedded
          newlines must be escaped with a backslash.  The option
          specifies the exit condition for the loop, and is
          specified by the character(s) immediately following the
          `h'.  Four options are recognized:

            hN    The loop is executed N times.  N must be a
                 non-negative integer.  If N is zero, the loop is
                 executed zero times.


                              - 6 -




QED(I)                       Jan/80                        QED(I)


            ht    The loop is executed until the truth flag is
                 true.

            hf    The loop is executed until the truth flag is
                 false.

            ha    The loop is executed until an error or a `yo'
                 (jump out of current input source) command is
                 encountered.

           The loop condition is tested after execution, so the
          `ht' and `hf' forms always execute at least once.

     ( . )i <text>
           The insert command accepts input text and inserts it
          before the addressed line.  `.' is left at the last
          line input; if there were none, at the line before the
          addressed line.  This command differs from the a
          command only in the placement of the text.

     ( .-1, . )j         or,
     ( .-1, . )j/replacement/
          The join command collapses all addressed lines into one
          by deleting the newline of each line but the last.  The
          replacement (if any) is placed between joined lines,
          replacing newline characters.  Newlines, backslashes
          `\', and slashes `/' within replacement must be
          preceded by a backslash, which will be discarded.  Note
          that only slashes may delimit replacement.  `.' is left
          at the (last) resulting line.  Note: the join command
          in qed has a different default addressing from that in
          ed.

     ( . )kx
          The mark command marks the addressed line with the
          given character, x, which must be a bname.  (The bname
          used in the mark has no relation to any buffer; it is
          just a label.)  The address form `'x' (apostrophe
          followed by x) then addresses this line.  `.' is not
          changed.  The marks are global to qed; marking a line
          `x' erases any previous mark `x' in any buffer.

     ( . , . )l
          The list command prints the addressed lines in an
          unambiguous way: a tab is printed as `\t', a backspace
          as `\b', a non-printing character is printed as a
          backslash followed by three octal digits, and a long
          line is folded, with the second and subsequent sub-
          lines indented one tab stop.  If the last character in
          the line is a blank, it is followed by `\n'.

     ( . , . )L
          The LIST command is similar to the list command, but
          each line displayed is preceded by its line number, any
          marks it has (which appear as `'x'), and a tab.

     ( . , . )ma
          The move command repositions the addressed lines after
          the line addressed by a.  The last of the moved lines
          becomes the current line.  The address a can also be of
          the form <bname>address, in which case the text is
          moved after the address in the named buffer, rather
          than the current buffer.  The buffer to which the text
          was moved becomes the current buffer.  The original
          buffer (if different) has `.' left at the line before
          the moved lines.

     n
          The names command lists the bname, dollar and filename
          of all active buffers, i.e. the current buffer and all


                              - 7 -




QED(I)                       Jan/80                        QED(I)


          buffers which are non-empty or have an associated
          filename.  If the buffer's changed flag is set, an
          apostrophe `'' is printed after the bname.  The current
          buffer is indicated by a period `.' before the dollar
          value.  A tab separates the dollar value from the
          filename.

     N
          The NAMES command is similar to the names command, but
          the display is only given for those buffers which have
          a saved file name and for which the changed flag is
          set.

     ops
          The option command allows various options to be set.
          The letter p specifies which option is being set.  The
          rest of the command, s, specifies the setting.  Most
          options can be either enabled or disabled; s is `s' to
          set the option, or `r' to reset it.  The following
          table describes the available options.  The default
          setting is shown after the option's letter.

            b     The browse option allows setting of the default
                 command sequence to be performed when a newline
                 command is typed at the terminal.  The command
                 sequence is set by following the `b' by a
                 newline-terminated string.  If the string is
                 null, the newline command resumes its default
                 behaviour.

            cr    The changed flag of the current buffer can be
                 set or reset as desired.

            dr    Dualcase search mode affects rule one of
                 regular expression construction so that a letter
                 is matched without regard to its case.

            ir    Interrupt catching mode causes qed to exit
                 cleanly when interrupted, including removal of
                 the temporary file.

            k<address> The address, up to a newline, is checked
                 for validity.  If it is an address in the
                 buffer, the truth flag is set and the line
                 number which the address matches is stored in
                 the `count'.  If the address is invalid, the
                 truth flag is reset (i.e. set to 0).  (The ok
                 command is not an option, per se; it is so named
                 for mnemonic reasons.)

            onr   Noisy mode causes automatic printing after
                 substitute or xform commands.  If the option is
                 set (via `ons'), the xform command behaves as if
                 it were `xp'; the substitute command is
                 unaffected.  If the option is set to a display
                 character, xform behaves as `xp', and the line
                 resulting from a substitution is printed in the
                 specified format if no display character follows
                 the substitute command.

            pr    Prompting mode causes `*' to be printed
                 immediately before a command (as opposed to
                 text) is read from the terminal.

            qr    Quit catching mode causes qed to dump core,
                 leaving the temporary file intact, when a QUIT
                 signal is received.

            Tr    Tracing mode causes all commands not typed
                 directly by the user to be echoed on the


                              - 8 -




QED(I)                       Jan/80                        QED(I)


                 terminal.  When a special character (other than
                 `\B or `\N') is encountered, a `[' is printed,
                 followed by a code specifying the character -
                 `za' for register `a', `g' for global command
                 list, `l' for `\l', `B' for browse pseudo-
                 register, etc.  Then, an `=' is printed,
                 followed by the interpretation of the special
                 character, followed by a `]'.

            us    Uppercase conversion mode enables case
                 transformation in substitute commands.  If the
                 `u' flag is set, the character caret (`^')
                 becomes non-literal in the replacement text of a
                 substitution.  It behaves just like `&', but
                 with case switching of alphabetics in the
                 replaced text.  If the flag is `u', all
                 alphabetics are mapped to upper case; if `l',
                 lower case; and if `s', the case is switched.

            vs    Verbose mode causes character counts to be
                 printed after e, r, w, R, S, and W commands.  It
                 also causes `!' to be printed upon completion of
                 the !, < and > commands.  The verbose mode may
                 be reset by the use of a flag when invoking qed.

            ?c    c must be one of `c', `d', `i', `p', `T' or
                 `v'.  The value of the corresponding flag is
                 stored in the truth.

     ( . , . )p
          The print command prints the addressed lines on the
          standard output (usually the user's terminal).  `.'  is
          left at the last line printed.

     ( . , . )P
          The PRINT command is similar to the print command, but
          each line displayed is preceded by its line number, any
          marks it has (which appear as `'x'), and a tab.

     q
          The quit command causes qed to exit.  No automatic
          write of a file is done.

     ($)r filename
          The read command reads in the given file after the
          addressed line.  If no file name is given, the
          remembered file name, if any, is used (see e and f
          commands).  The filename is remembered if there was not
          already a remembered file name in the current buffer.
          Address `0' is legal for r and causes the file to be
          read at the beginning of the buffer.  If qed is in
          verbose mode and the read is successful, the number of
          characters read is typed.  `.' is left at the last line
          read in from the file.

     R filename
          The restore command restores an environment saved by a
          save (S) command.  The changed flag in each buffer is
          restored from the files; all other flags are
          unaffected.  The input stack is reset to the top
          (teletype input) level, and the current buffer becomes
          `a'.  `.' is left at the saved value of `.' in buffer
          `a'.  If the filename is not specified, `q' is used.

     ( . , . )sn/regular expression/replacement/         or,
     ( . , . )sn/regular expression/replacement/g
          The substitute command searches each addressed line for
          occurrences of the specified regular expression.  The
          decimal number n defaults to 1 if missing.  On each
          line in which n matches are found, the nth matched


                              - 9 -




QED(I)                       Jan/80                        QED(I)


          string is replaced with replacement.  If the global
          replacement indicator `g' follows the command, all
          subsequent matches on the line are also replaced.
          Within a line, a search starts from the character
          following the last match, unless the last match was an
          empty string, in which case the search starts at the
          second character following the empty string (to ensure
          a match is not repeated).  It is an error for the
          substitution to fail on all addressed lines.  Any
          character other than newline or a numeral may be used
          instead of `/' to delimit the regular expression and
          replacement.  `.' is left at the last line substituted.

          An ampersand `&' appearing in replacement is replaced
          by the string matching the regular expression.  As a
          more general feature, the characters `\n', where n is a
          digit, are replaced by the text matched by the n-th
          regular subexpression enclosed between `\(' and `\)'.
          When nested, parenthesized subexpressions are present,
          n is determined by counting occurrences of `\('
          starting from the left.

          A caret `^' appearing in replacement behaves much like
          an ampersand, but provides a mechanism for case
          switching of alphabetics, as discussed under the o
          command.  To include an ampersand `&', caret `^',
          backslash `\', newline, or the delimiter literally in
          replacement, the character must be preceded by a
          backslash.  (Note that because special characters are
          interpreted early in command processing, certain
          characters, such as double quote, are poor choices for
          delimiter as they cannot be escaped easily.)  Lines may
          be split by substituting newline characters into them.

     S filename
          The save command saves the full buffer and register
          information in two files called `filename:aq' and
          `filename:bq'.  If the filename is absent, `q' is used.
          If the filename has more than 12 characters after the
          last slash `/', it is truncated to 12 characters to
          avoid overwriting the file.

     ( . , . )ta
          The copy command makes a copy of the addressed lines,
          and appends it after the line addressed by a (which may
          be 0).  `.' is left on the last line of the copy.  The
          address a can also be of the form <bname>address, in
          which case the text is copied after the address in the
          named buffer, rather than the current buffer.  The
          buffer to which the text was copied becomes the current
          buffer.  The original buffer (if different) has `.'
          left at the line before the copied lines.

     u
          The undo command restores the last line changed by a s,
          u, or x command.  Any new lines created by splitting
          the original are left.  It is an error if the line is
          not in the current buffer.  `.' is left at the restored
          line.

     (1,$)v/regular expression/command list
          This command is the same as the global command except
          that the command list is executed with `.' initially
          set to every line except those matching the regular
          expression.

     V/regular expression/command list
          This command is the same as the GLOBUF command except
          that the command list is executed with the current
          buffer initially set to every active buffer except


                             - 10 -




QED(I)                       Jan/80                        QED(I)


          those matching the regular expression.

     (1,$)w filename
          The write command writes the addressed lines onto the
          given file.  If the file does not exist, it is created
          mode rw-rw-rw- (readable and writable by everyone).
          The filename is remembered if there was not already a
          remembered file name in the current buffer.  If no file
          name is given, the remembered file name, if any, is
          used (see e and f commands).  `.' is unchanged.  If qed
          is in verbose mode and the command is successful, the
          number of characters written is typed.  If the buffer
          is empty, no write is attempted.

     (1,$)W
          The WRITE command is similar to, but more imperative
          than, the write command.  Unlike the write command, it
          will write an empty file if the buffer is empty.

     ( . , . )x
          The xform command allows one line at a time to be
          modified according to graphical requests.  The line to
          be modified is typed out, and then the modify request
          is read from the terminal (even if the xform command is
          in a global command or other nested input source).
          Generally each character in the request specifies how
          to modify the character immediately above it, in the
          original line, as described in the following table.

            #    Delete the above character.

            %    Replace the above character with a space.

            ^    Insert the rest of the request line before the
                above character.  If the rest of the request line
                is empty, insert a newline character.

            $    Delete the characters in the above line from
                this position on; replace them with the rest of
                the request line.

            space or tab: Leave above character(s) unchanged.

            any other: This character replaces the one above it.

           If the request line is longer than the line to be
          modified, the overhang is added to the end of the line
          without interpretation, that is, without treating any
          characters specially.  Any characters after a `^' or
          `$' request are not interpreted either.

          If a character has no width, or a negative width, the
          modification would be confusing.  For this reason,
          xform will not process control characters other than
          tab and newline, except in contexts where it need not
          know their width (that is, after a `^' or `$' request,
          or in the part of either the request or the line that
          overhangs the other).  Remember that the ERASE
          character (processed by the system) erases the last
          character typed, not the last column.

          Some characters take more than one column of the
          terminal to enter or display.  For example, entering
          the ERASE or KILL characters literally takes two
          columns because they must be escaped.  To delete a
          multi-column character, one must type `#' under all its
          columns.  To replace a multicolumn character, the
          replacement must be typed under the first column of the
          character.  Similarly, if a replacement character is
          multi-columned, it replaces the character in its first


                             - 11 -




QED(I)                       Jan/80                        QED(I)


          column.

          The tab character prints as a sequence of spaces, and
          may be modified as if it were that sequence.  As long
          as the last space is unmodified, it and the remaining
          contiguous spaces will represent a tab.

          Usually all the modifications desired can be specified
          by one request.  This is not necessarily the case when
          a `^' request is used, since no modifications can be
          made to the line beyond the point of the `^'.  For this
          reason, whenever a request contains an interpreted `^',
          the modification process is repeated after the request
          has been processed.  If the x command had a p suffix,
          the modification process is repeated until the request
          is empty even if there was no `^' request.  Note that
          this suffix allows one to see the line in its final
          form.  Only `p' or a space, tab or newline may
          immediately follow the `x'.

     y<condition><type>
          The jump command controls execution of buffer or
          global/GLOBUF/until input.  The condition is compared
          to the truth flag to see if the jump should be
          performed; if a `t', the jump is performed if the truth
          flag is true, if an `f', the jump is performed if the
          truth flag is false, if absent (i.e. any other
          character immediately after the `y'), the jump is
          always performed.  Several types of jumps exist:

            y[tf]o Jump out of the current input source (buffer,
                 register, global command line, etc.).  If the
                 current input source is the command line for a
                 g, G, v, V or h command , the command is
                 terminated.

            y[tf]N Control is transferred to absolute line N (an
                 integer) in the current buffer.  The current
                 input source must be a buffer.

            y[tf]'<label> Control is transferred to the first
                 line found, searching forward in the buffer,
                 that begins with a comment <label>.  The match
                 of the labels must be exact; regular expressions
                 are not used to define the control label.  (A
                 tab, blank or newline after the double quote
                 specifies a null label: a line beginning `" LAB'
                 cannot be transferred to by this form of jump.)
                 For example, `y'LAB' transfers control to a line
                 `"LAB'.  If no such label is found, control
                 resumes at the character after the label in the
                 jump command.  The current input source must be
                 a buffer.

            y[tf]`<label> Similar to `y'<label>', but the search
                 is in the opposite (upward) direction.

            y[tf] If no recognized type is given, input is
                 skipped up to the next newline.
       It is an error if reading the label or line number for a
       jump command causes the current input source (i.e. buffer)
       to be `popped.'  This can happen if the label is the last
       word in the buffer, but can be circumvented by putting an
       extra blank or newline after the jump command.

     ( ., .  )zX@
          Qed has 56 registers labeled by bnames.  The contents
          of the registers can be inserted into the input stream;
          see the section on ``Special Characters.''  The command
          zX, where X is a bname, specifies register X as the


                             - 12 -




QED(I)                       Jan/80                        QED(I)


          argument to the operation character (signified above by
          @) that follows it.  In the description below, N stands
          for a possibly signed decimal integer and S stands for
          a newline-terminated string.  Newlines may be embedded
          in registers by escaping them with a backslash `\'.
          The operations are as follows:

            p     Print the value of the register in `l' format.
            .     Set the register to the contents of the current
                 line (dot).
            /pattern/ Set the register to the portion of the
                 current line that matches the regular expression
                 in slashes.  If no such pattern is found, the
                 register is cleared and the truth flag is reset.
            :S    Set register to the string following the colon.
            $S    Append the string S at the end of the register.
            ^S    Insert the string S at the beginning of the
                 register.
            'Y    Make a direct copy of register Y in register X,
                 without interpreting special characters.  Y is
                 any register bname.
            +N    Increment by N the ASCII value of each
                 character in the register.
            -N    Decrement by N the ASCII value of each
                 character in the register.
            =S    Set truth flag to true if register is equal to
                 the string S.
            <S    Set truth flag to true if register is lexically
                 less than S.
            >S    Set truth flag to true if register is lexically
                 greater than S.
            l     Set the `count' to be the length of the
                 register.
            )N    `Take' the first N characters of the register,
                 i.e. truncate at the N+1'th character.  If N is
                 negative, take N from the end.
            (N    `Drop' the first N characters of the register.
                 If N is negative, drop from the end.
            [S    Set the `count' to the starting index of the
                 string S in the register.  If the string is not
                 a substring of the register, the `count' is set
                 to -1.
            C     `Clean' the register: collapse all `white
                 space' in the register to single blanks, and
                 delete initial blanks.

       The registers can also be dealt with numerically.
       Numerical operators must be preceded by a number sign `#',
       e.g. `zx#+2'.  It is an error to attempt to perform
       arithmetic on a register containing non-numeric text other
       than a leading sign.  The numerical operations are:

            a     For `Address'.  Set the value of the register
                 to be the value of the address given to the
                 command; e.g. `$za#a' sets register `a' to the
                 number of lines in the buffer.  `.' is
                 unchanged.
            r     For `Range'. Set register X to be the first
                 address given the command, and X+1 to be the
                 second.  If X is `~', an error is generated.
                 For example, `5,$zi#r' sets register `i' to 5,
                 and register `j' to the value of `$'.  `.' is
                 unchanged.  This command is usually used to pass
                 addresses to a command buffer.
            l     Set register to the length of the current line.
            :N    Set register to N.  Scanning of the number
                 stops at the first non-numeric character, not at
                 the end of the line.
            c     Set the register to the value of the `count'.
            t     Set register to the value of the truth


                             - 13 -




QED(I)                       Jan/80                        QED(I)


                 register.
            +N    Increment register by N. `-', `*', `/', and `%'
                 decrement, multiply, divide, or modulo the
                 register by N.
            ?     Set register to a pseudo-random number.  The
                 seed for the generator is based on the process
                 id, and so is different each time qed is
                 invoked.
            =N    Set truth flag to true if register is
                 numerically equal to N.
            <N    Set truth flag to true if register is less than
                 N.
            >N    Set truth flag to true if register is greater
                 than N.

       Several numerical operations may be combined in one
       command (and it is more efficient to do so when possible.)
       For example, `$zd#a#-3' sets register `d' to three less
       than the value of `$'.

     Z
          The ZERO command clears a buffer.  The contents,
          filename and all flags for the buffer are zeroed.  The
          character after the `Z' must be a blank, tab or
          newline.

     ($)=
          The line number of the addressed line is typed.  `.' is
          unchanged by this command.

     !UNIX command
          The bang command sends the remainder of the line after
          the `!'  to the UNIX shell(I) to be interpreted as a
          command.  The signals INTR, QUIT, and HUP are enabled
          or disabled as on entry to qed.  At the completion of
          the command, if qed is in verbose mode, an `!' is
          printed.  The return status of the command is stored in
          the truth flag.  `.' is unchanged.

     (1,$)>UNIX command
          The zap command is similar to the bang command, but the
          addressed lines become the default standard input of
          the command.

     ($)<UNIX command
          The crunch command is similar to the bang command, but
          the standard output of the command is appended to the
          current buffer after the addressed line, as though read
          with an r command from a temporary file.  `.' is left
          at the last line read.

     ( . )"
          The comment command sets dot to the addressed line, and
          ignores the rest of the line up to the first following
          double quote or newline.  If, however, the character
          immediately after the double quote is a second double
          quote (i.e. the command is ``""''), the text which
          would normally be ignored is printed on the standard
          output.  Special characters in the text will be
          interpreted, whether or not the text is printed, so to
          print a message such as ``Type \bx'' requires the
          command ``""Type \cbx''.  Commented lines are used as
          labels by the y (jump) command.

     %
          The register print command displays the name and value
          of all defined registers, followed by the \p (`P') and
          \r (`R') pseudo-registers, and the browse (`B')
          psuedo-register, if defined.



                             - 14 -




QED(I)                       Jan/80                        QED(I)


     #
          The numeric register print command displays the name
          and value of all defined registers with numeric values,
          followed by the truth flag (`T') and count (`C').

     %
          The register print command displays the name and value
          of all defined registers, followed by the \p (`P') and
          \r (`R') pseudo-registers, and the browse (`B')
          psuedo-register, if defined.

     ( .+1, .+1 )<newline>
          An address or addresses alone on a line cause the
          addressed lines to be printed.  If the last address
          separator before the newline was `;', only the final
          addressed line is printed.  A blank line alone causes
          the contents of the browse pseudo-register (described
          with the o command) to be executed.  If it is null, as
          it is initially, the newline command behaves as though
          the register contains `.+1p'.


     Special Characters

     Qed has some special character sequences with non-literal
     interpretations.  These sequences are processed at the
     lowest level of input, so their interpretation is completely
     transparent to the actual commands.  Whenever input from the
     user is expected, a special character can appear and will be
     processed.  Special characters can be nested in the sense
     that, for example, a buffer invoked by `\b' can contain a
     register invocation `\z'.  Backslashed escape sequences such
     as `\(' in regular expressions are not special characters,
     so are not interpreted at input.  The sequence `\(' is left
     untouched by the input mechanism of qed; any special meaning
     it receives is given it during regular expression
     processing.  The special characters are:

     \b<bname> The `b' must be followed by a bname.  When `\bX'
          is typed, the contents of buffer X, up to but not
          including the last newline, are read as if they were
          entered from the keyboard.  Typically, the missing
          newline is replaced by the newline which appears after
          the buffer invocation.

     \B    Equivalent to current buffer's bname.

     \c    The sequence \c is replaced by a single backslash,
          which is not re-scanned.  The effect of the `c' is to
          delay interpretation of a special character.

     \f    Equivalent to current buffer's file name.

     \F<bname> Equivalent to the file name in the named buffer.

     \l    One line is read from the standard input up to, but
          not including the terminal newline, which is discarded.
          Note that the first invocation will read the remainder
          of the last line entered from the keyboard.  For
          example, if a buffer is invoked by typing the line:

               \bxjunk

          the first \l in buffer `x' will return the string
          `junk'.

     \N    Translates into a newline.  Primarily useful when
          delayed (see below).  The `N' is upper case so that
          `\n' (like `\t') never has special meaning in qed.



                             - 15 -




QED(I)                       Jan/80                        QED(I)


     \p    Equivalent to the last regular expression used.

     \r    Equivalent to the last expression used in the
          replacement text of a substitute or join command.

     \z<bname> Equivalent to the contents of register `\zX'.

     \z+<bname> Equivalent to \zX, except that the characters in
          the register have their ASCII value incremented by one
          before interpretation.

     \z-<bname> Equivalent to \zX, except that the characters in
          the register have their ASCII value decremented by one
          before interpretation.

     \z#+<bname> Similar to \z+X, but the contents of the
          register are numerically incremented.  An error is
          generated if the register contains non-digits other
          than a leading sign.

     \z#-<bname> Similar to \z-X, but the contents of the
          register are numerically decremented.  An error is
          generated if the register contains non-digits other
          than a leading sign.

     \"    The sequence \" means `no character at all'!  It is
          primarily used to delay interpretation of a period that
          terminates an append, until the second or third time it
          is read (i.e. in loading execution buffers): the
          sequence \c". at the beginning of a line puts a period
          on the line which will terminate an append the second
          time it is read.

     \'[bfFlprz] If an apostrophe appears between the backslash
          and the identifying character for one of the special
          characters `\b', `\f', `\F', `\l', `\p', `\r' or `\z',
          interpretation is as usual except that any further
          special characters embedded in the buffer, register,
          etc. are not interpreted.

     The rules for interpreting a special character are fairly
     simple (but quite different from the backslash handling in
     most UNIX tools.).  A special character is interpreted
     immediately when it appears in the user's input stream,
     whether it is currently coming from the teletype, a buffer,
     a register, etc.  Thus, interpretation is recursive unless
     the special character is `\c'.  Special characters appearing
     in text processed in a command such as move, read or write,
     are not interpreted.  If the backslash-character pair is not
     a special character from the above list, it is passed
     unchanged.  Interpretation may be delayed using `\c'; for
     example, if a `\bx' is to be appended to a buffer for later
     interpretation, the user must type `\cbx'.  To delay
     interpretation 5 times, 5 c's must be placed between the
     backslash and the identifying character.  In regular
     expressions and substitutes, a backslash preceding a
     metacharacter turns off its special meaning.  Even in these
     cases, a backslash preceding an ordinary character is not
     deleted, unlike in Ed.  For example, since the `g' command
     must read its entire line, a `\zx' in a substitute driven by
     a global must be delayed if the contents of the register are
     to be different for each line, but since `\&' is not a
     special character except to the substitute, its
     interpretation need not be delayed:

          g/\$/ s/\.xyz/\czx \&/p zx+1

     globally searches for lines with a literal currency sign,
     and on each one substitutes for `.xyz' the contents of
     register `x' at the time of substitution, followed by a


                             - 16 -




QED(I)                       Jan/80                        QED(I)


     space and a literal ampersand.  The contents of register `x'
     are then incremented.  As a second example, the substitute

          s/xyz/\\N&/

     replaces `xyz' with a newline followed by `xyz'.  Note that
     the `\\N' is interpreted as `backslash followed by newline,'
     as the sequence `\\<ordinary character>' has no special
     meaning in qed outside of regular expressions.  However, to
     match, say, `\\z' using a regular expression, it must be
     entered as `\\\cz'.


     If an interrupt signal (ASCII DEL) is sent, qed prints `??'
     and returns to its command level.  If a hangup signal is
     received and the buffer is not empty, qed executes the
     command `S qed.hup'.

     Some size limitations: 512 characters per line, 256
     characters per global command list, 1024 characters of
     string storage area, used for storing registers, file names
     and regular expressions, 16 levels of input nesting, and
     128K characters in the temporary file.  The limit on the
     number of lines depends on the amount of core: each line
     takes 1 word.

FILES
     /tmp/q#, temporary; `#' is the process number (six decimal
     digits).

DIAGNOSTICS
     Diagnostics are in the form of `?' followed by a single
     letter code.  If the diagnostic is because of an
     inaccessible file, the offending file name is also
     displayed.  If input is not from the highest level (i.e. the
     standard input, usually the terminal), a traceback is
     printed, starting with the lowest level.  The elements of
     the traceback are of the form ?bXM.N or ?zXN, where X is the
     buffer or register being executed when the error was
     encountered, M is the line number in the buffer and N is the
     character number in the line or register.  The possible
     errors are:

      F   bad bname for \F
      G   nested GLOBUF commands
      N   last line of input did not end with newline
      O   unknown option in the o?c command
      R   restore (R) command failed (file not found or bad
         format)
      T   I/O error or overflow in tempfile
      Z   out of string space; clear a few registers or file
         names
      a   address syntax
      b   bad bname in a b command or for \b
      c   ran out of core
      d   bad directory name in cd command
      f   filename syntax error
      g   nested global commands
      i   more than 52 files in initialization argument list
      k   bad bname in k command
      l   an internal table length was exceeded
      m   tried to move to an illegal place [e.g. 1,6m4]
      o   error opening or creating a file
      p   bad regular expression (pattern) syntax
      r   read error from file
      s   no substitutions found
      t   bad x command data or terminal type unknown
      u   no line for u command to undo
      x   command syntax error
      w   write error on file


                             - 17 -




QED(I)                       Jan/80                        QED(I)


      y   bad jump command (including popping the input buffer
         while scanning the label)
      z   bad register bname
      |   failure to create pipe for > or < command
      #   bad numeric register operation
      $   line address out of range
      ?   interrupt
      /   line search failed
      [   bad index in a register take or drop command
      \   attempt to recursively append a buffer
      !   jackpot -- you found a bug in regular expression
         matching


SEE ALSO
     qedfile(I)
     qedbufs(I)
     A Tutorial Introduction to the ED Text Editor (B. W.
     Kernighan)
     Programming in Qed: a Tutorial (Robert Pike)
     ed(I)

U of T INFO
     Written at U of T, based on several incarnations of ed, with
     contributions from Tom Duff, Robert Pike, Hugh Redelmeier
     and David Tilbrook.














































                             - 18 -


